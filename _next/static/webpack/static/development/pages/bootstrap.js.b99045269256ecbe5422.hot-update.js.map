{"version":3,"file":"static/webpack/static/development/pages/bootstrap.js.b99045269256ecbe5422.hot-update.js","sources":["webpack:///./components/App.js","webpack:///./components/Code.js","webpack:///./pages/bootstrap.js"],"sourcesContent":["import React from \"react\";\nimport * as ColorSliders from \"react-color-sliders\";\nimport { Code } from \"./Code\";\nimport { LightnessControl } from \"./LightnessControl\";\nimport { HueControl } from \"./HueControl\";\nimport { Label } from \"./Label\";\nimport { Herman } from \"./Herman\";\nexport default class App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ...props.initialState,\n      exportType: props.initialState.exportTypes\n    };\n  }\n  hsl = (hue, lightness) => {\n    return `hsl(${this.state.hues.find(_ => _.name === hue).value}, ${\n      this.state.saturation\n    }%, ${this.state.lightnesses.find(_ => _.name === lightness).value}%)`;\n  };\n  setHue = (name, value) => {\n    this.setState({\n      hues: this.state.hues.map(_ => (_.name === name ? { ..._, value } : _))\n    });\n  };\n  setLightness = (name, value) => {\n    this.setState({\n      lightnesses: this.state.lightnesses.map(\n        _ => (_.name === name ? { ..._, value } : _)\n      )\n    });\n  };\n  setSaturation = saturation => {\n    this.setState({\n      saturation\n    });\n  };\n  setExportType = type => {\n    this.setState({\n      exportType: type\n    });\n  };\n  render() {\n    const { columnClass } = this.props;\n    return (\n      <div className=\"position-relative overflow-x-hidden \">\n        <div className=\"py-5 container position-relative z-index-2\">\n          <h1 className=\"display-4 mb-4 text-center\">\n            <strong>\n              Make a{\" \"}\n              <span style={{ color: this.props.libraryColor }}>\n                {this.props.libraryName}\n              </span>{\" \"}\n              color palette\n            </strong>{\" \"}\n            for your theme\n          </h1>\n          <section className=\"row mb-4\">\n            <div className={columnClass}>\n              <section className={\"\"}>\n                <Label>Saturation</Label>\n                <ColorSliders.SaturationSlider\n                  hue={this.state.hues[0].value}\n                  name={\"saturation\"}\n                  saturation={this.state.saturation}\n                  lightness={\n                    this.state.lightnesses[\n                      Math.floor(this.state.lightnesses.length / 2)\n                    ].value\n                  }\n                  onUpdate={this.setSaturation}\n                />\n              </section>\n              {this.state.hues.map(hue => {\n                return (\n                  <div key={hue.name} className={\"mt-4\"}>\n                    <Label>{hue.name}</Label>\n                    <HueControl\n                      style={{ marginBottom: 42 }}\n                      name={hue.name}\n                      hue={hue.value}\n                      lightness={\n                        this.state.lightnesses[\n                          Math.floor(this.state.lightnesses.length / 2)\n                        ].value\n                      }\n                      saturation={this.state.saturation}\n                      setHue={this.setHue}\n                    />\n                  </div>\n                );\n              })}\n            </div>\n            {this.state.lightnesses.map(lightness => (\n              <div className={columnClass} key={lightness.name}>\n                <Label>{lightness.name}</Label>\n                <LightnessControl\n                  className={\"mb-4\"}\n                  saturation={this.state.saturation}\n                  setLightness={this.setLightness}\n                  {...lightness}\n                />\n                {this.state.hues.map(hue => (\n                  <div key={hue.name + lightness.name} className={`${\"\"} mb-4`}>\n                    <div\n                      className={`rounded shadow-sm`}\n                      style={{\n                        height: 64,\n                        background: `linear-gradient(to bottom,\n                        ${this.hsl(hue.name, lightness.name)},\n                        ${this.hsl(hue.name, lightness.name)})`\n                      }}\n                    />\n                  </div>\n                ))}\n              </div>\n            ))}\n            <section className=\"col-lg-4 col-md-6\">\n              <h2 className=\"lead\">How this works:</h2>\n              <ol>\n                <li>You adjust the base color per row</li>\n                <li>Change lightness per column</li>\n                <li>\n                  Set color intensity across all colors using the saturation\n                  slider\n                </li>\n                <li>\n                  Export your colors in{\" \"}\n                  {this.props.exportTypes.map(_ => _.name).join(\", \")}\n                </li>\n              </ol>\n              <p className=\"text-justify\">\n                This app is built using React. Source code is available on{\" \"}\n                <a href=\"https://github.com/Hermanya/palette/tree/master/example\">\n                  GitHub\n                </a>\n                {\". \"}\n                All sliders used on this page are published on npm as{\" \"}\n                <var>react-color-sliders</var>,{\" \"}\n                <a href=\"https://github.com/Hermanya/palette/blob/master/README.md\">\n                  see documentation\n                </a>\n                .\n              </p>\n              <h2 className=\"lead\">Need a palette for another library?</h2>\n              <ul>\n                <li>Bootstrap</li>\n              </ul>\n\n              <Herman className=\"mb-4\" />\n              <Code\n                lightnesses={this.state.lightnesses}\n                hues={this.state.hues}\n                saturation={this.state.saturation}\n                exportTypes={this.props.exportTypes}\n                exportType={this.state.exportType}\n                setExportType={this.setExportType}\n                hsl={this.hsl}\n              />\n            </section>\n          </section>\n        </div>\n        <i\n          className=\"fas fa-palette position-absolute text-light z-index-1\"\n          style={{\n            top: \"-5vw\",\n            right: \"-5vw\",\n            transform: \"rotate(-90deg)\",\n            fontSize: \"25vw\"\n          }}\n        />\n        <i\n          className=\"fas fa-swatchbook position-absolute text-light z-index-1\"\n          style={{\n            transform: \"rotate(90deg)\",\n            top: \"1vw\",\n            left: \"1vw\",\n            fontSize: \"25vw\"\n          }}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nexport const Code = ({\n  hues,\n  lightnesses,\n  saturation,\n  exportTypes,\n  exportType,\n  setExportType,\n  className,\n  hsl,\n  ...props\n}) => (\n  <pre\n    className={`bg-dark text-white p-3 rounded shadow small ${className}`}\n    {...props}\n  >\n    <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n      {exportTypes.map(({ name }) => (\n        <button\n          key={name}\n          type=\"button\"\n          onClick={() => setExportType(name)}\n          className={`btn btn-sm btn-outline-light ${\n            exportType === name ? \"bg-light text-dark\" : \"\"\n          }`}\n        >\n          {name.toUpperCase()}\n        </button>\n      ))}\n    </div>\n    {\"\\n\\n\"}\n    <code>\n      {exportTypes.find(_ => _.name === exportType).toString({\n        hues,\n        lightnesses,\n        saturation,\n        hsl\n      })}\n    </code>\n  </pre>\n);\n","import React from \"react\";\nimport Head from \"next/head\";\nimport \"../components/index.scss\";\nimport App from \"../components/App\";\n\nconst Page = () => (\n  <React.Fragment>\n    <Head>\n      <meta\n        name=\"Description\"\n        content=\"Make a color palette in an intuitive way\"\n      />\n      <title>Make a bootstrap color palette</title>\n    </Head>\n    <App\n      libraryName={\"Bootstrap\"}\n      libraryColor={\"#563d7c\"}\n      initialState={{\n        hues: [\n          { name: \"blue\", value: 211 }, // hsl(211°, 100%, 50%)\n          { name: \"indigo\", value: 253 }, // hsl(263°, 90%, 51%)\n          { name: \"purple\", value: 271 }, // hsl(261°, 51%, 51%)\n          { name: \"pink\", value: 332 }, // hsl(332°, 79%, 58%)\n          { name: \"red\", value: 354 }, // hsl(354°, 70%, 54%)\n          { name: \"orange\", value: 27 }, // hsl(27°, 98%, 54%)\n          { name: \"yellow\", value: 45 }, // hsl(45°, 100%, 51%)\n          { name: \"green\", value: 134 }, // hsl(134°, 61%, 41%)\n          { name: \"teal\", value: 162 }, // hsl(162°, 73%, 46%)\n          { name: \"cyan\", value: 188 } // hsl(188°, 78%, 41%)\n        ],\n        lightnesses: [{ name: \"tone\", value: 50, domain: [25, 75] }],\n        saturation: 80,\n        exportType: \"SASS\"\n      }}\n      exportTypes={[\n        {\n          name: \"SASS\",\n          toString: ({ hues, lightnesses, saturation, hsl }) =>\n            hues\n              .map(hue => `$${hue.name}: ${hsl(hue.name, \"tone\")};`)\n              .join(\"\\n\") +\n            `\n\n$primary:       $blue;\n$secondary:     $gray-600;\n$success:       $green;\n$info:          $cyan;\n$warning:       $yellow;\n$danger:        $red;\n            `\n        }\n      ]}\n      columnClass=\"col-lg-4 col-md-3 col-6\"\n    />\n  </React.Fragment>\n);\n\nexport default Page;\n"],"mappings":"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","sourceRoot":""}